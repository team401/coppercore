import java.text.SimpleDateFormat
import com.vanniktech.maven.publish.SonatypeHost
import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
	id "java"
	id "maven-publish"
	id "com.peterabeles.gversion" version "1.10"
	id "com.diffplug.spotless" version "6.24.0"
	id "com.vanniktech.maven.publish" version "0.30.0"
		// id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-2"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

configurations.all {
	// exclude group: "edu.wpi.first.wpilibj"
}

// task(checkAkitInstall, dependsOn: "classes", type: JavaExec) {
// 	mainClass = "org.littletonrobotics.junction.CheckInstall"
// 	classpath = sourceSets.main.runtimeClasspath
// }
// TODO: Figure out why advantagekit won't let us build the project
//compileJava.finalizedBy checkAkitInstall

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
	def wpilibVersion = "2025.1.1-beta-1"
	implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpilibVersion"
	implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:$wpilibVersion"
	implementation "edu.wpi.first.apriltag:apriltag-java:$wpilibVersion"
	implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpilibVersion"
	implementation "edu.wpi.first.wpiunits:wpiunits-java:$wpilibVersion"
	implementation "edu.wpi.first.wpimath:wpimath-java:$wpilibVersion"

	// def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
	// annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
	def akitVersion = "4.0.0-beta-1"
	annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitVersion"
	implementation "org.littletonrobotics.akit:akit-java:$akitVersion"
	// implementation "org.littletonrobotics.akit:akit-wpilibio:$akitVersion"

	def photonVersion = "v2025.0.0-beta-5"
	implementation "org.photonvision:photonlib-java:$photonVersion"
	implementation "org.photonvision:photontargeting-java:$photonVersion"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
	options.compilerArgs.add '-XDstringConcat=inline'
}

task(replayWatch, type: JavaExec) {
	mainClass = "org.littletonrobotics.junction.ReplayWatch"
	classpath = sourceSets.main.runtimeClasspath
}

// project.compileJava.dependsOn(createVersionFile)
// gversion {
// srcDir       = "src/main/java/"
// classPackage = "frc.robot"
// className    = "BuildConstants"
// dateFormat   = "yyyy-MM-dd HH:mm:ss z"
// timeZone     = "America/New_York"
// indent       = "  "
// }

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url 'https://frcmaven.wpi.edu/artifactory/release/'
	}
		maven {
		url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
		credentials {
			username = "Mechanical-Advantage-Bot"
			password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
		}
	}
	gradlePluginPortal()
	maven {
		name "photonvisionRepositoryReleases"
		url "https://maven.photonvision.org/releases"
	}
}


spotless {
// optional: limit format enforcement to just the files changed by this feature branch
ratchetFrom 'origin/main'

format 'misc', {
	// define the files to apply `misc` to
	target '*.gradle', '.gitattributes', '.gitignore'

	// define the steps to apply to those files
	trimTrailingWhitespace()
	indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
	endWithNewline()
}
java {
	// don't need to set target, it is inferred from java
	// Allow ignoring certain parts in formatting.
	toggleOffOn()
	// apply a specific flavor of google-java-format
	googleJavaFormat('1.19.2').aosp().reflowLongStrings()
	// fix formatting of type annotations
	formatAnnotations()
}
}

// Automatically format code on build.
compileJava.dependsOn 'spotlessApply'


// Add this to each subproject separately.
mavenPublishing {

	configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
	publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

	// Project release information.
	coordinates(group, project.name, version)
	pom {
		name = project.name
		inceptionYear = "2024"
		description = 'FRC 401 core vision library'
		url = 'http://www.github.com/team401/coppercore'
		licenses {
			license {
				name = 'MIT License'
				url = 'https://opensource.org/license/mit'
			}
		}
		developers {
			developer {
				id = 'aidnem'
				name = 'Aiden Mathai'
			}
			developer {
				id = 'linglejack'
				name = 'Jack Lingle'
			}
			developer {
				id = 'avidraccoon'
				name = 'Nathan Smith'
			}
			developer {
				id = 'minhngyuenbhs'
				name = 'Minh Ngyuen'
			}
			developer {
				id = 'jkleiber'
				name = 'Justin Kleiber'
			}
		}
		scm {
			url = "https://github.com/team401/coppercore/"
			connection = "scm:git:git://github.com/team401/coppercore.git"
			developerConnection = "scm:git:ssh://git@github.com/team401/coppercore.git"
		}
	}
}
