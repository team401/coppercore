import java.text.SimpleDateFormat
import com.vanniktech.maven.publish.SonatypeHost
import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
	id "java"
	id "com.peterabeles.gversion" version "1.10"
	id "com.diffplug.spotless" version "6.24.0"
	id "com.vanniktech.maven.publish" version "0.30.0"
	id "edu.wpi.first.GradleRIO" version "2025.1.1"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit
repositories {
	maven {
		url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
		credentials {
			username = "Mechanical-Advantage-Bot"
			password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
		}
	}
	mavenLocal()
}

task(replayWatch, type: JavaExec) {
	mainClass = "org.littletonrobotics.junction.ReplayWatch"
	classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5
dependencies {
	annotationProcessor wpi.java.deps.wpilibAnnotations()
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
	annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
//
// The sim GUI is *disabled* by default to support running
// AdvantageKit log replay from the command line. Set the
// value to "true" to enable the sim GUI by default (this
// is the standard WPILib behavior).
wpi.sim.addGui().defaultEnabled = false
wpi.sim.addDriverstation()

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
	options.compilerArgs.add '-XDstringConcat=inline'
}

spotless {
// optional: limit format enforcement to just the files changed by this feature branch
ratchetFrom 'origin/main'

format 'misc', {
	// define the files to apply `misc` to
	target '*.gradle', '.gitattributes', '.gitignore'

	// define the steps to apply to those files
	trimTrailingWhitespace()
	indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
	endWithNewline()
}
java {
	// don't need to set target, it is inferred from java
	// Allow ignoring certain parts in formatting.
	toggleOffOn()
	// apply a specific flavor of google-java-format
	googleJavaFormat('1.19.2').aosp().reflowLongStrings()
	// fix formatting of type annotations
	formatAnnotations()
}
}

// Automatically format code on build.
compileJava.dependsOn 'spotlessApply'


// Add this to each subproject separately.
mavenPublishing {

	configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
	publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

	// Project release information.
	coordinates(group, project.name, version)
	pom {
		name = project.name
		inceptionYear = "2024"
		description = 'FRC 401 core vision library'
		url = 'http://www.github.com/team401/coppercore'
		licenses {
			license {
				name = 'MIT License'
				url = 'https://opensource.org/license/mit'
			}
		}
		developers {
			developer {
				id = 'aidnem'
				name = 'Aiden Mathai'
			}
			developer {
				id = 'linglejack'
				name = 'Jack Lingle'
			}
			developer {
				id = 'avidraccoon'
				name = 'Nathan Smith'
			}
			developer {
				id = 'minhngyuenbhs'
				name = 'Minh Ngyuen'
			}
			developer {
				id = 'jkleiber'
				name = 'Justin Kleiber'
			}
		}
		scm {
			url = "https://github.com/team401/coppercore/"
			connection = "scm:git:git://github.com/team401/coppercore.git"
			developerConnection = "scm:git:ssh://git@github.com/team401/coppercore.git"
		}
	}
}
