import java.text.SimpleDateFormat

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
	id "com.peterabeles.gversion" version "1.10"
	id "com.diffplug.spotless" version "6.24.0"
	id 'org.ajoberstar.grgit' version "5.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

def MAIN_CLASS = "coppercore"

deploy {
    targets {
        roborio(getTargetTypeClass("RoboRIO")) {
            team = project.frc.getTeamOrDefault(401)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {

                }

                frcStaticFileDeploy(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree('lib/src/main/deploy')
                    directory = "/home/lvuser/deploy"
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

def includeDesktopSupport = true

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // WPILIB setup
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// adds dependency files to large jar
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	from sourceSets.main.allSource
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(MAIN_CLASS)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// deploy jar + tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)

tasks.withType(JavaCompile) {
	options.compilerArgs.add '-XDstringConcat=inline'
}
